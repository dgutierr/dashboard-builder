/**
 * Copyright (C) 2013 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jboss.dashboard.ui.controller.requestChain;

import org.jboss.dashboard.annotation.config.Config;
import org.jboss.dashboard.commons.cdi.CDIBeanLocator;
import org.jboss.dashboard.ui.components.URLMarkupGenerator;
import org.jboss.dashboard.workspace.Parameters;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;

/**
 * The CSRF processor validates a security token inside the URLs.
 * The token is generated by the application itself and it's added to every URL generated.
 * That way the application prevents the processing of malicious CSRF requests.
 */
@ApplicationScoped
public class CSRFTokenProcessor extends AbstractChainProcessor {

    public static CSRFTokenProcessor lookup() {
        return CDIBeanLocator.get().lookupBeanByType(CSRFTokenProcessor.class);
    }

    protected boolean enabled;
    protected URLMarkupGenerator urlMarkupGenerator;
    protected SessionInitializer sessionInitializer;
    protected CSRFTokenGenerator csrfTokenGenerator;

    public CSRFTokenProcessor() {
    }

    @Inject
    public CSRFTokenProcessor(@Config("true") boolean enabled,
                              URLMarkupGenerator urlMarkupGenerator,
                              SessionInitializer sessionInitializer,
                              CSRFTokenGenerator csrfTokenGenerator) {
        this.enabled = enabled;
        this.urlMarkupGenerator = urlMarkupGenerator;
        this.sessionInitializer = sessionInitializer;
        this.csrfTokenGenerator = csrfTokenGenerator;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public boolean processRequest() throws Exception {
        // Check if the CSRF control is enabled.
        if (!enabled) {
            return true;
        }

        // If the session is being created then the CSRF control makes no sense.
        HttpServletRequest request = getHttpRequest();
        if (sessionInitializer.isNewSession(request)) {
            return true;
        }

        // Internal requests are excluded from CSRF processing
        if (urlMarkupGenerator.isInternalRequest(request)) {
            return true;
        }

        String token = request.getParameter(csrfTokenGenerator.getTokenName());
        String ajaxParam = request.getParameter(Parameters.AJAX_ACTION);
        String servletPath = request.getServletPath();
        boolean isAjax = ajaxParam != null && Boolean.parseBoolean(ajaxParam);
        boolean isFriendly = servletPath.startsWith(FriendlyUrlProcessor.FRIENDLY_MAPPING);
        boolean isJsp = servletPath.startsWith(JspUrlProcessor.JSP_MAPPING);
        boolean isKPI = servletPath.startsWith(KPIProcessor.KPI_MAPPING);

        // CSRF protection is guaranteed for AJAX & non-friendly URL based requests
        boolean csrfRequired = isAjax || !(isFriendly || isJsp || isKPI);
        if (token == null && csrfRequired) {
            throw new ServletException("CSRF token missing.");
        }
        // If the current token is NOT valid then abort the request flow.
        if (token != null && !csrfTokenGenerator.isValidToken(token)) {
            throw new ServletException("CSRF token validation broken.");
        }
        return true;
    }
}
